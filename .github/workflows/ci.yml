name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  FLUTTER_VERSION: '3.32.0'

jobs:
  quality-check:
    name: Code Quality & Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Generate code
        run: dart run build_runner build --delete-conflicting-outputs
        
      - name: Create test .env file
        run: echo "GEMINI_API_KEY=dummy_key_for_ci" > .env
        
      - name: Verify formatting
        run: dart format --set-exit-if-changed .
        
      - name: Analyze code
        run: flutter analyze --fatal-warnings --fatal-infos
        
      - name: Run tests
        run: flutter test --coverage --reporter=expanded
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: coverage/lcov.info
          fail_ci_if_error: false
          
      - name: Check test results
        run: |
          if [ -f coverage/lcov.info ]; then
            echo "✅ Tests completed successfully"
          else
            echo "❌ Test coverage file not found"
            exit 1
          fi

  build-android:
    name: Build Android
    needs: quality-check
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
          
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Generate code
        run: dart run build_runner build --delete-conflicting-outputs
        
      - name: Create .env file for CI build
        run: |
          echo "GEMINI_API_KEY=dummy_key_for_ci" > .env
          echo "ℹ️ Using dummy API key for CI build (testing purposes only)"
        
      - name: Build debug APK
        run: flutter build apk --debug
        
      - name: Build release APK (unsigned)
        run: flutter build apk --release
        
      - name: Build release AAB (unsigned)
        run: flutter build appbundle --release
        
      - name: Verify Android build success
        run: |
          echo "✅ Verifying Android build outputs..."
          if [ -f "build/app/outputs/flutter-apk/app-debug.apk" ]; then
            echo "✅ Debug APK built successfully"
          else
            echo "❌ Debug APK not found"
            exit 1
          fi
          
          if [ -f "build/app/outputs/flutter-apk/app-release.apk" ]; then
            echo "✅ Release APK built successfully"
          else
            echo "❌ Release APK not found"
            exit 1
          fi
          
          if [ -f "build/app/outputs/bundle/release/app-release.aab" ]; then
            echo "✅ Release AAB built successfully"
          else
            echo "❌ Release AAB not found"
            exit 1
          fi
          
          echo "🎉 All Android builds completed successfully (CI verification only)"

  build-ios:
    name: Build iOS
    needs: quality-check
    runs-on: macos-15
    timeout-minutes: 45
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Select Xcode version
        run: sudo xcode-select -s /Applications/Xcode_16.2.app/Contents/Developer
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Generate code
        run: dart run build_runner build --delete-conflicting-outputs
        
      - name: Create .env file for CI build
        run: |
          echo "GEMINI_API_KEY=dummy_key_for_ci" > .env
          echo "ℹ️ Using dummy API key for CI build (testing purposes only)"
        
      - name: Install CocoaPods dependencies
        run: |
          cd ios
          pod install
          
      - name: Build iOS (debug, no codesign)
        run: flutter build ios --debug --no-codesign
        
      - name: Build iOS (release, no codesign)
        run: flutter build ios --release --no-codesign
        
      - name: Verify iOS build success
        run: |
          echo "✅ Verifying iOS build outputs..."
          if [ -d "build/ios/iphoneos/Runner.app" ]; then
            echo "✅ iOS Debug build completed successfully"
          else
            echo "❌ iOS Debug build not found"
            exit 1
          fi
          
          echo "🎉 iOS builds completed successfully (CI verification only)"
          echo "ℹ️ Note: CI builds use dummy API keys and no code signing"

  ci-summary:
    name: CI Summary
    needs: [quality-check, build-android, build-ios]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Create CI summary
        run: |
          echo "## 🧪 CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Completed Steps" >> $GITHUB_STEP_SUMMARY
          echo "- **Code Quality**: Tests, analysis, and formatting checks" >> $GITHUB_STEP_SUMMARY
          echo "- **Android Build**: APK and AAB compilation verified" >> $GITHUB_STEP_SUMMARY  
          echo "- **iOS Build**: Debug and release compilation verified" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ℹ️ Important Notes" >> $GITHUB_STEP_SUMMARY
          echo "- CI builds use dummy API keys for testing purposes" >> $GITHUB_STEP_SUMMARY
          echo "- iOS builds are unsigned (--no-codesign)" >> $GITHUB_STEP_SUMMARY
          echo "- For production builds, use release workflows with proper secrets" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Next Steps for Release" >> $GITHUB_STEP_SUMMARY
          echo "1. Create version tag to trigger release workflows" >> $GITHUB_STEP_SUMMARY
          echo "2. Configure GitHub Secrets for production API keys" >> $GITHUB_STEP_SUMMARY
          echo "3. Set up store credentials for deployment workflows" >> $GITHUB_STEP_SUMMARY