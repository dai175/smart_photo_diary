name: iOS Deploy

on:
  workflow_dispatch:  # ÊâãÂãïÂÆüË°å„ÅÆ„Åø
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'testflight'
        type: choice
        options:
          - testflight
          - appstore

env:
  FLUTTER_VERSION: '3.32.0'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Generate code
        run: dart run build_runner build --delete-conflicting-outputs
        
      - name: Create test .env file
        run: echo "GEMINI_API_KEY=test_key_for_ci" > .env
        
      - name: Run analyzer
        run: flutter analyze --fatal-warnings --fatal-infos
        
      - name: Run tests
        run: flutter test --reporter=expanded

  ios-deploy:
    name: Deploy to App Store
    needs: test
    runs-on: macos-15
    environment: production  # GitHub Environment for additional security
    timeout-minutes: 60
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Select Xcode version
        run: sudo xcode-select -s /Applications/Xcode_16.2.app/Contents/Developer
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Generate code
        run: dart run build_runner build --delete-conflicting-outputs
        
      - name: Create production .env file
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          if [ -z "$GEMINI_API_KEY" ]; then
            echo "‚ùå Error: GEMINI_API_KEY secret is not set"
            echo "Please add GEMINI_API_KEY to GitHub repository secrets"
            exit 1
          fi
          echo "GEMINI_API_KEY=$GEMINI_API_KEY" > .env
          echo "‚úÖ Production .env file created with real API key"
          
      - name: Install CocoaPods dependencies
        run: |
          cd ios
          pod install
          
      - name: Import Code-Signing Certificates
        uses: Apple-Actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE }}
          p12-password: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          
      - name: Download Provisioning Profiles
        uses: Apple-Actions/download-provisioning-profiles@v2
        with:
          bundle-id: com.focuswave.dev.smartPhotoDiary
          profile-type: IOS_APP_STORE
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}
          
      - name: Configure Manual Signing
        run: |
          # ReleaseË®≠ÂÆö„ÇíManual Signing„Å´Â§âÊõ¥
          sed -i '' 's/CODE_SIGN_STYLE = Automatic;/CODE_SIGN_STYLE = Manual;/g' ios/Runner.xcodeproj/project.pbxproj
          
          # DebugÁèæÂú®„ÅÆË®≠ÂÆö„ÇíÁ¢∫Ë™ç
          echo "=== „Éó„É≠„Ç∏„Çß„ÇØ„ÉàË®≠ÂÆöÁ¢∫Ë™ç ==="
          grep -n "CODE_SIGN_STYLE\|DEVELOPMENT_TEAM" ios/Runner.xcodeproj/project.pbxproj || true
          
          echo "=== Âà©Áî®ÂèØËÉΩ„Å™„Éó„É≠„Éì„Ç∏„Éß„Éã„É≥„Ç∞„Éó„É≠„Éï„Ç°„Ç§„É´‰∏ÄË¶ß ==="
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/ || echo "„Éó„É≠„Éì„Ç∏„Éß„Éã„É≥„Ç∞„Éó„É≠„Éï„Ç°„Ç§„É´„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"
          
          echo "=== „Ç∑„Çπ„ÉÜ„É†„Ç≠„Éº„ÉÅ„Çß„Éº„É≥Á¢∫Ë™ç ==="
          security find-identity -v -p codesigning || echo "ÁΩ≤Âêç„Ç¢„Ç§„Éá„É≥„ÉÜ„Ç£„ÉÜ„Ç£„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"
          
          echo "=== „Éó„É≠„Éì„Ç∏„Éß„Éã„É≥„Ç∞„Éó„É≠„Éï„Ç°„Ç§„É´Ë©≥Á¥∞Á¢∫Ë™ç ==="
          for profile in ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision; do
            echo "--- $(basename "$profile") ---"
            profile_name=$(security cms -D -i "$profile" | plutil -extract Name raw - 2>/dev/null || echo "ÂêçÂâçÂèñÂæóÂ§±Êïó")
            bundle_id=$(security cms -D -i "$profile" | plutil -extract Entitlements.application-identifier raw - 2>/dev/null || echo "Bundle IDÂèñÂæóÂ§±Êïó")
            echo "„Éó„É≠„Éï„Ç°„Ç§„É´Âêç: $profile_name"
            echo "Bundle ID: $bundle_id"
            
            # Ê≠£„Åó„ÅÑ„Éó„É≠„Éï„Ç°„Ç§„É´‰ª•Â§ñ„ÇíÂâäÈô§
            if [ "$profile_name" != "Smart Photo Diary App Store" ] && [[ "$bundle_id" == "***.com.focuswave.dev.smartPhotoDiary" ]]; then
              echo "‚ùå ‰ΩôË®à„Å™„Éó„É≠„Éï„Ç°„Ç§„É´„ÇíÂâäÈô§: $profile_name"
              rm -f "$profile"
            else
              echo "‚úÖ ‰øùÊåÅ: $profile_name"
            fi
          done
          
          echo "=== ÂâäÈô§Âæå„ÅÆ„Éó„É≠„Éï„Ç°„Ç§„É´‰∏ÄË¶ß ==="
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/ || echo "„Éó„É≠„Éï„Ç°„Ç§„É´„Å™„Åó"
          
      - name: Create ExportOptions.plist
        run: |
          cat > ios/Runner/ExportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>teamID</key>
              <string>${{ secrets.IOS_TEAM_ID }}</string>
              <key>uploadBitcode</key>
              <false/>
              <key>compileBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
              <key>signingStyle</key>
              <string>manual</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>com.focuswave.dev.smartPhotoDiary</key>
                  <string>Smart Photo Diary App Store</string>
              </dict>
          </dict>
          </plist>
          EOF
          
      - name: Build iOS IPA
        run: |
          flutter build ipa --release \
            --export-options-plist=ios/Runner/ExportOptions.plist
            
      - name: Upload to TestFlight
        if: github.event.inputs.environment == 'testflight' || github.event.inputs.environment == ''
        uses: Apple-Actions/upload-testflight-build@v1
        with:
          app-path: build/ios/ipa/smart_photo_diary.ipa
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}
          
      - name: Upload to App Store
        if: github.event.inputs.environment == 'appstore'
        uses: Apple-Actions/upload-testflight-build@v1
        with:
          app-path: build/ios/ipa/smart_photo_diary.ipa
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}
          # Note: App Store submission requires additional review process
          
      - name: Cleanup sensitive files
        if: always()
        run: |
          rm -f .env
          rm -f ios/Runner/ExportOptions.plist
          
      - name: Create release summary
        run: |
          echo "## üçé iOS Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚úÖ Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Bundle ID**: com.focuswave.dev.smartPhotoDiary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ github.event.inputs.environment || 'testflight' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì± Next Steps" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event.inputs.environment }}" = "testflight" ] || [ -z "${{ github.event.inputs.environment }}" ]; then
            echo "1. Check TestFlight for build processing status" >> $GITHUB_STEP_SUMMARY
            echo "2. Add beta testers for testing" >> $GITHUB_STEP_SUMMARY
            echo "3. Collect feedback and iterate" >> $GITHUB_STEP_SUMMARY
          else
            echo "1. Check App Store Connect for submission status" >> $GITHUB_STEP_SUMMARY
            echo "2. Wait for Apple review process" >> $GITHUB_STEP_SUMMARY
            echo "3. Monitor for approval and release" >> $GITHUB_STEP_SUMMARY
          fi

  notify:
    name: Notify Deployment
    needs: ios-deploy
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify success
        if: needs.ios-deploy.result == 'success'
        run: |
          echo "‚úÖ iOS deployment successful!"
          echo "Environment: ${{ github.event.inputs.environment || 'testflight' }}"
          
      - name: Notify failure
        if: needs.ios-deploy.result == 'failure'
        run: |
          echo "‚ùå iOS deployment failed!"
          echo "Please check the logs for details."
          exit 1