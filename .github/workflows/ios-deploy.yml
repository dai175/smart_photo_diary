name: iOS Deploy

on:
  workflow_dispatch:  # ÊâãÂãïÂÆüË°å„ÅÆ„Åø
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'testflight'
        type: choice
        options:
          - testflight
          - appstore

env:
  FLUTTER_VERSION: '3.32.0'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Generate code
        run: dart run build_runner build --delete-conflicting-outputs
        
      - name: Create test .env file
        run: echo "GEMINI_API_KEY=test_key_for_ci" > .env
        
      - name: Run analyzer
        run: flutter analyze --fatal-warnings --fatal-infos
        
      - name: Run tests
        run: flutter test --reporter=expanded

  ios-deploy:
    name: Deploy to App Store
    needs: test
    runs-on: macos-15
    environment: production
    timeout-minutes: 60
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Select Xcode version
        run: sudo xcode-select -s /Applications/Xcode_16.2.app/Contents/Developer
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Generate code
        run: dart run build_runner build --delete-conflicting-outputs
        
      - name: Create production .env file
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          if [ -z "$GEMINI_API_KEY" ]; then
            echo "‚ùå Error: GEMINI_API_KEY secret is not set"
            echo "Please add GEMINI_API_KEY to GitHub repository secrets"
            exit 1
          fi
          echo "GEMINI_API_KEY=$GEMINI_API_KEY" > .env
          echo "‚úÖ Production .env file created with real API key"
          
      - name: Install CocoaPods dependencies
        run: |
          cd ios
          pod install
          
      - name: Install Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE }}
          P12_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE }}
          KEYCHAIN_PASSWORD: ${{ secrets.IOS_KEYCHAIN_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # Import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # Apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

          # Xcode project already configured for manual signing
          
          # Verify installation
          echo "=== Installed certificates ==="
          security find-identity -v -p codesigning $KEYCHAIN_PATH
          echo "=== Installed provisioning profiles ==="
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
          echo "=== Xcode project signing settings ==="
          grep -n "CODE_SIGN_STYLE\|PROVISIONING_PROFILE_SPECIFIER" ios/Runner.xcodeproj/project.pbxproj || true
          
      - name: Create ExportOptions.plist
        run: |
          cat > ios/ExportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>teamID</key>
              <string>${{ secrets.IOS_TEAM_ID }}</string>
              <key>uploadBitcode</key>
              <false/>
              <key>compileBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
              <key>signingStyle</key>
              <string>manual</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>com.focuswave.dev.smartPhotoDiary</key>
                  <string>Smart Photo Diary App Store</string>
              </dict>
          </dict>
          </plist>
          EOF
          
      - name: Build iOS IPA
        run: |
          flutter build ipa --release \
            --export-options-plist=ios/ExportOptions.plist
          
          # List generated IPA files to find the correct name
          echo "=== Generated IPA files ==="
          ls -la build/ios/ipa/
          
      - name: Upload to TestFlight
        if: github.event.inputs.environment == 'testflight' || github.event.inputs.environment == ''
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
        run: |
          # Find the actual IPA file (should be the only .ipa file in the directory)
          IPA_FILE=$(find build/ios/ipa -name "*.ipa" | head -1)
          echo "Found IPA file: $IPA_FILE"
          
          if [ -z "$IPA_FILE" ]; then
            echo "‚ùå Error: No IPA file found in build/ios/ipa/"
            exit 1
          fi
          
          xcrun altool --upload-app \
            -f "$IPA_FILE" \
            -u "$APPLE_ID" \
            -p "$APPLE_APP_PASSWORD" \
            -t ios
          
      - name: Upload to App Store
        if: github.event.inputs.environment == 'appstore'
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
        run: |
          # Find the actual IPA file (should be the only .ipa file in the directory)
          IPA_FILE=$(find build/ios/ipa -name "*.ipa" | head -1)
          echo "Found IPA file: $IPA_FILE"
          
          if [ -z "$IPA_FILE" ]; then
            echo "‚ùå Error: No IPA file found in build/ios/ipa/"
            exit 1
          fi
          
          xcrun altool --upload-app \
            -f "$IPA_FILE" \
            -u "$APPLE_ID" \
            -p "$APPLE_APP_PASSWORD" \
            -t ios
          
      - name: Cleanup sensitive files
        if: always()
        run: |
          rm -f .env
          rm -f ios/ExportOptions.plist
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db || true
          
      - name: Create release summary
        run: |
          echo "## üçé iOS Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚úÖ Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Bundle ID**: com.focuswave.dev.smartPhotoDiary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ github.event.inputs.environment || 'testflight' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì± Next Steps" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event.inputs.environment }}" = "testflight" ] || [ -z "${{ github.event.inputs.environment }}" ]; then
            echo "1. Check TestFlight for build processing status" >> $GITHUB_STEP_SUMMARY
            echo "2. Add beta testers for testing" >> $GITHUB_STEP_SUMMARY
            echo "3. Collect feedback and iterate" >> $GITHUB_STEP_SUMMARY
          else
            echo "1. Check App Store Connect for submission status" >> $GITHUB_STEP_SUMMARY
            echo "2. Wait for Apple review process" >> $GITHUB_STEP_SUMMARY
            echo "3. Monitor for approval and release" >> $GITHUB_STEP_SUMMARY
          fi

  notify:
    name: Notify Deployment
    needs: ios-deploy
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify success
        if: needs.ios-deploy.result == 'success'
        run: |
          echo "‚úÖ iOS deployment successful!"
          echo "Environment: ${{ github.event.inputs.environment || 'testflight' }}"
          
      - name: Notify failure
        if: needs.ios-deploy.result == 'failure'
        run: |
          echo "‚ùå iOS deployment failed!"
          echo "Please check the logs for details."
          exit 1