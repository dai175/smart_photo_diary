name: Create Release

on:
  push:
    tags:
      - 'v*'  # „Éê„Éº„Ç∏„Éß„É≥„Çø„Ç∞„Åß„Éà„É™„Ç¨„Éº (‰æã: v1.0.0, v1.2.3-beta)
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

env:
  FLUTTER_VERSION: '3.32.0'

permissions:
  contents: write
  pull-requests: read

jobs:
  version:
    name: Extract Version Info
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      version_name: ${{ steps.version.outputs.version_name }}
      build_number: ${{ steps.version.outputs.build_number }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Extract version info
        id: version
        run: |
          # Extract version from Git tag (industry standard approach)
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            # Tagged release: extract version from tag (e.g., v1.0.0 -> 1.0.0)
            VERSION="${GITHUB_REF#refs/tags/}"      # v1.0.0 (for tag_name)
            VERSION_NAME="${VERSION#v}"             # 1.0.0 (for build_name)
            echo "Release build - Tag: ${VERSION}, Version: ${VERSION_NAME}"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual execution: use input version
            VERSION="${{ github.event.inputs.version }}"
            VERSION_NAME="${VERSION#v}"
            echo "Manual build - Version: ${VERSION_NAME}"
          else
            # Non-release build: use development version
            VERSION="v1.0.0-dev"
            VERSION_NAME="1.0.0-dev"
            echo "Development build - Version: ${VERSION_NAME}"
          fi
          
          # Generate incremental build number (Apple/Google recommended approach)
          BUILD_NUMBER=$GITHUB_RUN_NUMBER
          echo "Build number: ${BUILD_NUMBER} (run #${GITHUB_RUN_NUMBER})"
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "version_name=${VERSION_NAME}" >> $GITHUB_OUTPUT
          echo "build_number=${BUILD_NUMBER}" >> $GITHUB_OUTPUT

  test:
    name: Run Tests
    needs: version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Generate code
        run: dart run build_runner build --delete-conflicting-outputs
        
      - name: Create test .env file
        run: echo "GEMINI_API_KEY=test_key_for_ci" > .env
        
      - name: Run analyzer
        run: flutter analyze --fatal-warnings --fatal-infos
        
      - name: Run tests
        run: flutter test --coverage --reporter=expanded
        
      - name: Verify test coverage
        run: |
          if [ -f coverage/lcov.info ]; then
            echo "‚úÖ Test coverage generated successfully"
          else
            echo "‚ùå Test coverage not found"
            exit 1
          fi

  build-android-release:
    name: Build Android Release Artifacts
    needs: [version, test]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
          
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Generate code
        run: dart run build_runner build --delete-conflicting-outputs
        
      - name: Verify required secrets
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          if [ -z "$GEMINI_API_KEY" ]; then
            echo "‚ùå Error: GEMINI_API_KEY secret is not set"
            echo "Please add GEMINI_API_KEY to GitHub repository secrets for release builds"
            exit 1
          fi
          echo "‚úÖ Required secrets verified"
        
      - name: Build Android artifacts
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "Building Android version: ${{ needs.version.outputs.version_name }} (Build ${{ needs.version.outputs.build_number }})"
          
          echo "üîë Using build-time constants for API key injection"
          # Build Android artifacts with version from version job
          flutter build apk --release \
            --build-name=${{ needs.version.outputs.version_name }} \
            --build-number=${{ needs.version.outputs.build_number }} \
            --dart-define=GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
            
          flutter build appbundle --release \
            --build-name=${{ needs.version.outputs.version_name }} \
            --build-number=${{ needs.version.outputs.build_number }} \
            --dart-define=GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
        
      - name: Build environment cleanup
        run: |
          echo "‚úÖ Build environment cleanup completed"
        
      - name: Rename artifacts with version
        run: |
          VERSION=${{ github.ref_name }}
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION=${{ github.event.inputs.version }}
          fi
          
          cp build/app/outputs/flutter-apk/app-release.apk \
             build/app/outputs/flutter-apk/smart-photo-diary-${VERSION}.apk
          cp build/app/outputs/bundle/release/app-release.aab \
             build/app/outputs/bundle/release/smart-photo-diary-${VERSION}.aab
             
      - name: Generate checksums
        run: |
          cd build/app/outputs/flutter-apk
          sha256sum smart-photo-diary-*.apk > smart-photo-diary-checksums.txt
          cd ../bundle/release
          sha256sum smart-photo-diary-*.aab >> ../../flutter-apk/smart-photo-diary-checksums.txt
          
      - name: Upload Android artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-release-artifacts
          path: |
            build/app/outputs/flutter-apk/smart-photo-diary-*.apk
            build/app/outputs/bundle/release/smart-photo-diary-*.aab
            build/app/outputs/flutter-apk/smart-photo-diary-checksums.txt
          retention-days: 90

  build-ios-release:
    name: Build iOS Release Artifacts
    needs: [version, test]
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Generate code
        run: dart run build_runner build --delete-conflicting-outputs
        
      - name: Verify required secrets
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          if [ -z "$GEMINI_API_KEY" ]; then
            echo "‚ùå Error: GEMINI_API_KEY secret is not set"
            echo "Please add GEMINI_API_KEY to GitHub repository secrets for iOS release builds"
            exit 1
          fi
          echo "‚úÖ Required secrets verified"
        
      - name: Install CocoaPods dependencies
        run: |
          cd ios
          pod install
          
      - name: Build iOS (release, no codesign)
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "Building iOS version: ${{ needs.version.outputs.version_name }} (Build ${{ needs.version.outputs.build_number }})"
          
          echo "üîë Using build-time constants for API key injection"
          flutter build ios --release --no-codesign \
            --build-name=${{ needs.version.outputs.version_name }} \
            --build-number=${{ needs.version.outputs.build_number }} \
            --dart-define=GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
        
      - name: Build environment cleanup
        run: |
          echo "‚úÖ Build environment cleanup completed"
        
      - name: Archive iOS build
        run: |
          cd build/ios/iphoneos
          zip -r smart-photo-diary-ios-${{ needs.version.outputs.version }}.zip Runner.app
          
      - name: Upload iOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-release-artifacts
          path: build/ios/iphoneos/smart-photo-diary-ios-*.zip
          retention-days: 90

  create-release:
    name: Create GitHub Release
    needs: [version, build-android-release, build-ios-release]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download Android artifacts
        uses: actions/download-artifact@v4
        with:
          name: android-release-artifacts
          path: ./artifacts/android
          
      - name: Download iOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: ios-release-artifacts
          path: ./artifacts/ios
          
      # Release notes will be created manually on GitHub Releases page
          
      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create release using GitHub CLI (modern approach)
          PRERELEASE_FLAG=""
          if [ "${{ github.event.inputs.prerelease || false }}" = "true" ]; then
            PRERELEASE_FLAG="--prerelease"
          fi
          
          # Create draft release
          RELEASE_URL=$(gh release create ${{ needs.version.outputs.version }} \
            --title "Smart Photo Diary ${{ needs.version.outputs.version }}" \
            --notes "Build artifacts for Smart Photo Diary ${{ needs.version.outputs.version }}

          **Build Info:** ${{ needs.version.outputs.version_name }} (Build ${{ needs.version.outputs.build_number }})
          **Commit:** ${{ github.sha }}
          
          Release notes will be updated manually." \
            --draft \
            $PRERELEASE_FLAG)
          
          echo "RELEASE_URL=$RELEASE_URL" >> $GITHUB_OUTPUT
        id: create_release
        
      - name: Upload release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # List actual files before upload
          echo "=== Android artifacts ==="
          ls -la ./artifacts/android/
          echo "=== iOS artifacts ==="
          ls -la ./artifacts/ios/
          
          # Upload all release assets using GitHub CLI with dynamic file detection
          gh release upload ${{ needs.version.outputs.version }} \
            ./artifacts/android/smart-photo-diary-*.apk \
            ./artifacts/android/smart-photo-diary-*.aab \
            ./artifacts/ios/smart-photo-diary-ios-*.zip \
            ./artifacts/android/smart-photo-diary-checksums.txt
          
      - name: Create release summary
        run: |
          echo "## üéâ Release Created Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Release Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release URL**: ${{ steps.create_release.outputs.RELEASE_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Pre-release**: ${{ github.event.inputs.prerelease || false }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì¶ Assets" >> $GITHUB_STEP_SUMMARY
          echo "- Android APK" >> $GITHUB_STEP_SUMMARY
          echo "- Android AAB (Play Store)" >> $GITHUB_STEP_SUMMARY
          echo "- iOS Build Archive" >> $GITHUB_STEP_SUMMARY
          echo "- SHA256 Checksums" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîó Links" >> $GITHUB_STEP_SUMMARY
          echo "- [View Release](${{ steps.create_release.outputs.RELEASE_URL }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Download Assets](${{ steps.create_release.outputs.RELEASE_URL }})" >> $GITHUB_STEP_SUMMARY