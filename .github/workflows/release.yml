name: Create Release

on:
  push:
    tags:
      - 'v*'  # バージョンタグでトリガー (例: v1.0.0, v1.2.3-beta)
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

env:
  FLUTTER_VERSION: '3.32.0'

jobs:
  version:
    name: Extract Version Info
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      version_name: ${{ steps.version.outputs.version_name }}
      build_number: ${{ steps.version.outputs.build_number }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Extract version info
        id: version
        run: |
          # Extract version from Git tag (industry standard approach)
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            # Tagged release: extract version from tag (e.g., v1.0.0 -> 1.0.0)
            VERSION="${GITHUB_REF#refs/tags/}"      # v1.0.0 (for tag_name)
            VERSION_NAME="${VERSION#v}"             # 1.0.0 (for build_name)
            echo "Release build - Tag: ${VERSION}, Version: ${VERSION_NAME}"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual execution: use input version
            VERSION="${{ github.event.inputs.version }}"
            VERSION_NAME="${VERSION#v}"
            echo "Manual build - Version: ${VERSION_NAME}"
          else
            # Non-release build: use development version
            VERSION="v1.0.0-dev"
            VERSION_NAME="1.0.0-dev"
            echo "Development build - Version: ${VERSION_NAME}"
          fi
          
          # Generate incremental build number (Apple/Google recommended approach)
          BUILD_NUMBER=$GITHUB_RUN_NUMBER
          echo "Build number: ${BUILD_NUMBER} (run #${GITHUB_RUN_NUMBER})"
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "version_name=${VERSION_NAME}" >> $GITHUB_OUTPUT
          echo "build_number=${BUILD_NUMBER}" >> $GITHUB_OUTPUT

  test:
    name: Run Tests
    needs: version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Generate code
        run: dart run build_runner build --delete-conflicting-outputs
        
      - name: Create test .env file
        run: echo "GEMINI_API_KEY=test_key_for_ci" > .env
        
      - name: Run analyzer
        run: flutter analyze --fatal-warnings --fatal-infos
        
      - name: Run tests
        run: flutter test --coverage --reporter=expanded
        
      - name: Verify test coverage
        run: |
          if [ -f coverage/lcov.info ]; then
            echo "✅ Test coverage generated successfully"
          else
            echo "❌ Test coverage not found"
            exit 1
          fi

  build-release:
    name: Build Release Artifacts
    needs: [version, test]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
          
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Generate code
        run: dart run build_runner build --delete-conflicting-outputs
        
      - name: Create .env file
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          if [ -z "$GEMINI_API_KEY" ]; then
            echo "❌ Error: GEMINI_API_KEY secret is not set"
            echo "Please add GEMINI_API_KEY to GitHub repository secrets for release builds"
            exit 1
          fi
          echo "GEMINI_API_KEY=$GEMINI_API_KEY" > .env
          echo "✅ Production .env file created with real API key"
        
      - name: Build Android artifacts
        run: |
          echo "Building version: ${{ needs.version.outputs.version_name }} (Build ${{ needs.version.outputs.build_number }})"
          
          # Build Android artifacts with version from version job
          flutter build apk --release \
            --build-name=${{ needs.version.outputs.version_name }} \
            --build-number=${{ needs.version.outputs.build_number }}
            
          flutter build appbundle --release \
            --build-name=${{ needs.version.outputs.version_name }} \
            --build-number=${{ needs.version.outputs.build_number }}
        
      - name: Clean up sensitive files
        run: |
          rm -f .env
          echo "✅ Sensitive files removed from build environment"
        
      - name: Rename artifacts with version
        run: |
          VERSION=${{ github.ref_name }}
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION=${{ github.event.inputs.version }}
          fi
          
          cp build/app/outputs/flutter-apk/app-release.apk \
             build/app/outputs/flutter-apk/smart-photo-diary-${VERSION}.apk
          cp build/app/outputs/bundle/release/app-release.aab \
             build/app/outputs/bundle/release/smart-photo-diary-${VERSION}.aab
             
      - name: Generate checksums
        run: |
          cd build/app/outputs/flutter-apk
          sha256sum smart-photo-diary-*.apk > smart-photo-diary-checksums.txt
          cd ../bundle/release
          sha256sum smart-photo-diary-*.aab >> smart-photo-diary-checksums.txt
          
      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            build/app/outputs/flutter-apk/smart-photo-diary-*.apk
            build/app/outputs/bundle/release/smart-photo-diary-*.aab
            build/app/outputs/bundle/release/smart-photo-diary-checksums.txt
          retention-days: 90

  build-ios-release:
    name: Build iOS Release
    needs: [version, test]
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Generate code
        run: dart run build_runner build --delete-conflicting-outputs
        
      - name: Create .env file
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          if [ -z "$GEMINI_API_KEY" ]; then
            echo "❌ Error: GEMINI_API_KEY secret is not set"
            echo "Please add GEMINI_API_KEY to GitHub repository secrets for iOS release builds"
            exit 1
          fi
          echo "GEMINI_API_KEY=$GEMINI_API_KEY" > .env
          echo "✅ Production .env file created with real API key"
        
      - name: Install CocoaPods dependencies
        run: |
          cd ios
          pod install
          
      - name: Build iOS (release, no codesign)
        run: |
          echo "Building iOS version: ${{ needs.version.outputs.version_name }} (Build ${{ needs.version.outputs.build_number }})"
          
          flutter build ios --release --no-codesign \
            --build-name=${{ needs.version.outputs.version_name }} \
            --build-number=${{ needs.version.outputs.build_number }}
        
      - name: Clean up sensitive files
        run: |
          rm -f .env
          echo "✅ Sensitive files removed from build environment"
        
      - name: Archive iOS build
        run: |
          cd build/ios/iphoneos
          zip -r smart-photo-diary-ios-${{ needs.version.outputs.version }}.zip Runner.app
          
      - name: Upload iOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-release-artifacts
          path: build/ios/iphoneos/smart-photo-diary-ios-*.zip
          retention-days: 90

  create-release:
    name: Create GitHub Release
    needs: [version, build-release, build-ios-release]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: ./artifacts/android
          
      - name: Download iOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: ios-release-artifacts
          path: ./artifacts/ios
          
      # Release notes will be created manually on GitHub Releases page
          
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.version.outputs.version }}
          release_name: Smart Photo Diary ${{ needs.version.outputs.version }}
          body: |
            Build artifacts for Smart Photo Diary ${{ needs.version.outputs.version }}
            
            **Build Info:** ${{ needs.version.outputs.version_name }} (Build ${{ needs.version.outputs.build_number }})
            **Commit:** ${{ github.sha }}
            
            Release notes will be updated manually.
          draft: true
          prerelease: ${{ github.event.inputs.prerelease || false }}
        id: create_release
        
      - name: Upload Android APK
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/android/smart-photo-diary-${{ needs.version.outputs.version }}.apk
          asset_name: smart-photo-diary-${{ needs.version.outputs.version }}.apk
          asset_content_type: application/vnd.android.package-archive
          
      - name: Upload Android AAB
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/android/smart-photo-diary-${{ needs.version.outputs.version }}.aab
          asset_name: smart-photo-diary-${{ needs.version.outputs.version }}.aab
          asset_content_type: application/octet-stream
          
      - name: Upload iOS build
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/ios/smart-photo-diary-ios-${{ needs.version.outputs.version }}.zip
          asset_name: smart-photo-diary-ios-${{ needs.version.outputs.version }}.zip
          asset_content_type: application/zip
          
      - name: Upload checksums
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/android/smart-photo-diary-checksums.txt
          asset_name: smart-photo-diary-checksums.txt
          asset_content_type: text/plain
          
      - name: Create release summary
        run: |
          echo "## 🎉 Release Created Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Release Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release URL**: ${{ steps.create_release.outputs.html_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Pre-release**: ${{ github.event.inputs.prerelease || false }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Assets" >> $GITHUB_STEP_SUMMARY
          echo "- Android APK" >> $GITHUB_STEP_SUMMARY
          echo "- Android AAB (Play Store)" >> $GITHUB_STEP_SUMMARY
          echo "- iOS Build Archive" >> $GITHUB_STEP_SUMMARY
          echo "- SHA256 Checksums" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Links" >> $GITHUB_STEP_SUMMARY
          echo "- [View Release](${{ steps.create_release.outputs.html_url }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Download Assets](${{ steps.create_release.outputs.html_url }})" >> $GITHUB_STEP_SUMMARY