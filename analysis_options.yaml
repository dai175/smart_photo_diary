# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

analyzer:
  exclude:
    - '**/*.g.dart'  # Generated files
    - '**/*.freezed.dart'  # Freezed generated files
  errors:
    # Suppress info-level lints for cleaner output in mature codebase
    # These rules provide style guidance but don't indicate actual problems
    prefer_const_constructors: ignore  # Performance hint, not critical
    prefer_const_declarations: ignore  # Use const for declarations when possible
    avoid_redundant_argument_values: ignore  # Style preference, not error
    unintended_html_in_doc_comment: ignore  # Documentation formatting, not functional issue
    use_build_context_synchronously: ignore  # Async context usage, handled by mounted checks
    # Migration-related suppressions
    deprecated_member_use: ignore  # Ignore deprecation warnings during migration
    deprecated_member_use_from_same_package: ignore  # Ignore deprecation warnings within the same package

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at https://dart.dev/lints.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    # Code Style Consistency
    prefer_single_quotes: true  # Prefer single quotes for strings
    # prefer_const_constructors: suppressed in analyzer.errors
    # prefer_const_declarations: suppressed in analyzer.errors
    unnecessary_this: true  # Avoid unnecessary use of 'this'
    
    # Performance
    avoid_unnecessary_containers: true  # Avoid unnecessary Container widgets
    # avoid_redundant_argument_values: suppressed in analyzer.errors
    
    # Error Prevention
    avoid_print: true  # Avoid using print for debugging
    avoid_empty_else: true  # Avoid empty else blocks
    always_declare_return_types: true  # Always declare return types
    
    # Readability
    lines_longer_than_80_chars: false  # Disable 80 char limit (better for Japanese text)
    sort_child_properties_last: true  # Place child properties last
    curly_braces_in_flow_control_structures: false  # Allow single-line if statements for conciseness

# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
